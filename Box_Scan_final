#!/bin/bash
#RED='\033[1;31m'
#NC='\033[0m'
#GREEN='\033[1;32m'
scripts=Normal
Nmaplogfile=/opt/diamond/nmap_logfile_${scripts}
Resultfile=/opt/diamond/SDK_Scan_Result_${scripts}
AutoResult=/opt/diamond/Auto_Scan_Result_${scripts}
[ ! -d $Nmaplogfile ] && mkdir -p nmap_logfile_${scripts} && chmod 777  nmap_logfile_${scripts}
[ ! -d $Resultfile  ] && mkdir -p SDK_Scan_Result_${scripts} && chmod 777 SDK_Scan_Result_${scripts}
[ ! -d $AutoResult  ] && mkdir -p Auto_Scan_Result_${scripts} && chmod 777 Auto_Scan_Result_${scripts} #檔案不存在為真才執行&&

# sub_scan_parameter
Scan_Port()
{
    local Type=$1
	local IPaddr_fin=$2
	local Quality=$3
	local ver=$4
	/opt/diamond/isc_sample_1059 -$ver $IPaddr_fin --server alpha --$Type 5 --nmapPath /opt/diamond/nmap/bin/nmap --workPath /opt/diamond/temp/ --cltCertPath /opt/diamond/certs/enc_stg_cert.pem --cltKeyPath /opt/diamond/certs/enc_stg_key.pem --srvCertPath /opt/diamond/certs/enc_stg_srv_cert.pem --keypass SqIO2FYpqrwIhT7k --quality $Quality
    sleep 2
}
# sub_checkIPformat
CheckIPformat()
{
	local IPaddr_fin=$2
	case $1 in
	-v4) local RegRule='^(([0-9]{0,3}\.){3}[0-9]{0,3})$';;
	-v6) local RegRule='^(([0-9a-f]{0,4}:){7}([0-9a-f]{0,4}))$'
		[ "$IPaddr_fin" = ":::::::" ] && echo "Unavailable IP${1} address : $IPaddr_fin" && return 1;;
	esac
	local IPregNum=`echo $IPaddr_fin | grep -cE "$RegRule"`
	if [ $IPregNum -eq 0 -o -z $IPaddr_fin ]; then
		echo "Invalid format of IP${1} address : $IPaddr_fin"
		return 1
	fi
	if [ "$1" = "-v4" ]; then
		local SubIPArr="`echo $IPaddr_fin | sed 's,\.,\ ,g'`"
		for each_subIP in $SubIPArr
		do
			local RangeRegNum=`echo $each_subIP | egrep -c "^(00|000)$|^(0[0-9]|00[0-9])$"`
			if [ ${IPaddr_fin%%.*} -eq 0 -o $each_subIP -gt 254 -o $RangeRegNum -ne 0 ]; then
				echo "Invalid range of IP address : $IPaddr_fin"
				return 2
			fi
		done
		return 0
	fi	
}
# sub_vulnResult
vulnResult()
{
	local Type=$1                                            
	local IPaddr_fin=$2
	local Quality=$3
	local logFileName=$4
	local vulID_List=$5
	local vuln_True_Num=0
	local vuln_False_Num=0
	clear && printf "NAME=$(date)_${IPaddr_fin}_Scan_${Type}_${Quality}\n\n"
	printf "%s %s %s\n\n" "IP = [" "${IPaddr_fin}" "]"
	printf "Searching Vulnerability ID List:\n[\n"
	for search_id in `echo $vulID_List | sed 's/\,/\ /g'` 
	do	
		printf "%5s%s\n" "" "$search_id"
	done
	printf "]\n\nVulnerabilities Details:\n[\n"
	for each_id in `echo $vulID_List | sed 's/\,/\ /g'` 
	do 
		if [ `grep -c $each_id $logFileName` -ne 0 ]; then 
			printf "     %s\n" `grep -oE "\"id\"\:\"${each_id}\"\,\"is_vuln\"\:(true|false)" $logFileName`
			local Vulntarget=`grep -oE "\"id\"\:\"${each_id}\"\,\"is_vuln\"\:true" $logFileName | uniq`
			[ "$Vulntarget" != "" ] && local vuln_True_List="${vuln_True_List} | $Vulntarget" || local vuln_True_List="${vuln_True_List} | Vuln not found"
			[ `grep -coE "\"id\"\:\"${each_id}\"\,\"is_vuln\"\:true" $logFileName` -eq 0 ] && local vuln_False_Num=$(( $vuln_False_Num + 1 )) || local vuln_True_Num=$(( $vuln_True_Num + 1 )) 
		fi 
	done
	[ $vuln_True_Num -eq 0 ] && printf "%5s%s\n" "" " Vulnerability are not found"
	printf "%s\n\n%s %s %s %s %s %s\n" "]" "Total" "Vulnerability" "Amount:" "[" "$vuln_True_Num" "]"
	printf "\nScan Type: [ $Type ]\n"
	printf "============================================================================== \n"
	grep "API" $logFileName | sed -n '$p'
	printf "============================================================================== \n"
	if [ $vuln_False_Num -eq 0 -a $vuln_True_Num -ne 0 ]; then 
		local Result=Passed
		printf "%s %s %s ${GREEN}%s${NC} %s ${GREEN}%s${NC}\n\n" "Scan" "Vulnerability" "Amount:" "$vuln_True_Num" "Result:" "$Result"
	elif [ "$vulID_List" = "" -a $vuln_False_Num -eq 0 -a $vuln_True_Num -eq 0 ]; then
		local Result=Passed
		printf "%s %s %s ${GREEN}%s${NC} %s ${GREEN}%s${NC}\n\n" "Scan" "Vulnerability" "Amount:" "$vuln_True_Num" "Result:" "$Result"
	else
		local Result=Failed
		printf "%s %s %s ${RED}%s${NC}\n\n" "Scan" "Vulnerability" "Result:" "$Result"
	fi
	printf "\n%s %s %s %s %s\n" "IP=${IPaddr_fin}," "Scan Type=${Type}," "Vulnerability ID=[ ${vuln_True_List} ]," "Vulnerability Amount=${vuln_True_Num}," "Result=$Result"
}
# man_invoke_parameter_create log ,result
check_scan()
{
    
	local Type=$1
	local IPaddr_fin=$2
	local vulID_List=$3
	local Quality=$4
	local ver=$5
	for each_ip in `echo $IPaddr_fin | sed 's/\,/\ /g'`
	do
		local IPremoveSpace=`echo $each_ip | sed 's/\ //g'`
		CheckIPformat $ver $IPremoveSpace
		[ $? -ne 0 ] && return 1
	done
	Scan_Port  $Type  $IPaddr_fin  $Quality `echo $ver | sed 's,\-v,,g'`  >> "${Nmaplogfile}/nmap_${Type}_${IPaddr_fin}_${ver}_${Quality}_${vulID_List}"
	vulnResult $Type  $IPaddr_fin  $Quality  "${Nmaplogfile}/nmap_${Type}_${IPaddr_fin}_${ver}_${Quality}_${vulID_List}" >> "${Resultfile}/Result_${Type}_${IPaddr_fin}_${ver}_${Quality}_${vulID_List}" $vulID_List 
	sleep 1
	clear
	echo  -e "Scan_${IPaddr_fin}_${ver}_${Type}_${Quality}_${vulID_List} done"
	echo  -e "device IP......Scan Type......Quality Level......Vulnerabilities ID.........................Result......"
	echo  -e "${IPaddr_fin}......${Type}......${Quality}......${vulID_List}......`grep -oE "(Passed|Failed)$" ${Resultfile}/Result_${Type}_${IPaddr_fin}_${ver}_${Quality}_${vulID_List} | sed -n '$p'` \n" | tee -a  "$AutoResult/Auto_result_${Type}" 
    #result value
	PassNum=`grep -o "Passed" "$AutoResult/Auto_result_${Type}" | wc -l`
	FailNum=`grep -o "Failed" "$AutoResult/Auto_result_${Type}" | wc -l`
	NmapResultFile=${Nmaplogfile}/nmap_${Type}_${IPaddr_fin}_${ver}_${Quality}_${vulID_List}
	SDK_ver=`grep -oE '^SDK version: \"([0-9]+\.){2}[0-9]+\"' $NmapResultFile | head -n1`
	Pack_ver=`grep -oE  '^Package version: \"([0-9]+\.){2}[0-9]+\"' $NmapResultFile | head -n1`
	Nmap_ver=`grep -oE '^Nmap version: \"[0-9]+\.[0-9]+\"' $NmapResultFile  | head -n1`
	Lu_ver=`grep -oE '^Lua version: \"([0-9]+\.){2}[0-9]+\"' $NmapResultFile | head -n1`
	RecordType=$Type
	
}

#upload result to FTP
upload_FTP(){
    echo -e "Pass=$PassNum   Fail=$FailNum    Total=$(($PassNum+$FailNum))" | tee -a  "$AutoResult/Auto_result_$RecordType"
    echo -e "$SDK_ver   $Pack_ver   $Nmap_ver   $Lu_ver" | tee -a  "$AutoResult/Auto_result_$RecordType"
    local ResultFile="$AutoResult/Auto_result_${RecordType}"
    local now=$(date '+%Y-%m-%d-%T')
	local time=${now%:*}
	local pak1=${Resultfile##*/}
	local pak2=${Nmaplogfile##*/}
	upload_server=ftp://192.168.2.119/upload_result/
	if [ `grep -oE "SDK version" "$ResultFile" | wc -l` -eq 1 ];then
		curl -T "$ResultFile" -u jay_chang:ABcd_1234 $upload_server 
		rm -rf $ResultFile  
		tar -czvf /opt/diamond/${pak1}_${time}.bak.tar.gz  /opt/diamond/$pak1
		tar -czvf /opt/diamond/${pak2}_${time}.bak.tar.gz  /opt/diamond/$pak2
		curl -T /opt/diamond/${pak1}_${time}.bak.tar.gz -u jay_chang:ABcd_1234 $upload_server && curl -T /opt/diamond/${pak2}_${time}.bak.tar.gz -u jay_chang:ABcd_1234 $upload_server
		[ $? -eq 0 ] && rm -rf /opt/diamond/${pak1}_${time}.bak.tar.* && rm -rf /opt/diamond/${pak2}_${time}.bak.tar.*
		rm -rf $Resultfile/Result_${RecordType}* && rm -rf $Nmaplogfile/nmap_${RecordType}*
        fi
}

# SPEC Vulnerabilitie ID List:
#     YM_SHELLSHOCK_CVE-2014-6271 
#     YM_SAMBACRY_CVE-2017-7494
#     YM_ROUTER_CVE-2017-6549
#     YM_ROUTER_CVE-2017-5892
#     YM_ROUTER_CVE-2016-6277
#     YM_ROUTER_CVE-2014-8361
#     YM_DEFAULT_PASSWORD-TELNET
#     YM_DEFAULT_PASSWORD-SSH
#     YM_IPCAM_CVE-2017-8225
#     YM_ROUTER_CVE-2011-4723
#     YM_ROUTER_CVE-2014-9583
#     YM_WANNACRY_MS17-010
#     YM_POODLE_CVE-2014-3566
#     YM_DROWN_CVE-2016-0800
#     YM_HEARTBLEED_CVE-2014-0160
#     YM_NAS_CVE-2017-6361
#     YM_ROUTER_CVE-2013-2679
#     YM_WEB_CVE-2012-1823
#     YM_SHELLSHOCK_CVE-2014-6271
# Function of check_scan() Usage:
#      check_scan [Type] [IP] [Vuln_ID] [Quality] [IP_Protocol]
#      argument {IP_Address, Vulnerabilitie_ID} required use ',' to split each IP, ID
# e.g.
#      check_scan Quick 192.168.1.10,192.168.1.12 "YM_WANNACRY_MS17-010,YM_POODLE_CVE-2014-3566" B -v4
#      check_scan Quick 2001:b030:220:126:a00:27ff:fe95:5d3 "YM_HEARTBLEED_CVE-2014-0160" A -v6
check_scan Normal 192.168.2.5 "YM_ROUTER_CVE-2013-2679"  A  4
check_scan Normal 192.168.2.3 "YM_ROUTER_CVE-2011-4723"  A  4
check_scan Normal 192.168.2.4 "YM_ROUTER_CVE-2014-9583"  A  4
check_scan Normal 192.168.2.102 "YM_HEARTBLEED_CVE-2014-0160"  A  4
check_scan Normal 192.168.2.102 "YM_DROWN_CVE-2016-0800"  A  4
check_scan Normal 192.168.2.102 "YM_POODLE_CVE-2014-3566"  A  4
check_scan Normal 192.168.2.100 "YM_WANNACRY_MS17-010"  A  4
check_scan Normal 192.168.2.130 "YM_SAMBACRY_CVE-2017-7494"  A  4
check_scan Normal 192.168.2.130 "YM_NAS_CVE-2017-6361" A 4
check_scan Normal 192.168.2.117 "YM_IPCAM_CVE-2017-8225"  A  4

check_scan Normal 192.168.2.3 "YM_ROUTER_CVE-2011-4723"  B  4
check_scan Normal 192.168.2.4 "YM_ROUTER_CVE-2014-9583"  B  4
check_scan Normal 192.168.2.102 "YM_HEARTBLEED_CVE-2014-0160"  B  4
check_scan Normal 192.168.2.102 "YM_DROWN_CVE-2016-0800"  B  4
check_scan Normal 192.168.2.102 "YM_POODLE_CVE-2014-3566"  B  4
check_scan Normal 192.168.2.100 "YM_WANNACRY_MS17-010"  B  4
check_scan Normal 192.168.2.130 "YM_SAMBACRY_CVE-2017-7494"  B  4
check_scan Normal 192.168.2.130 "YM_NAS_CVE-2017-6361" B 4
check_scan Normal 192.168.2.117 "YM_IPCAM_CVE-2017-8225"  B  4
check_scan Normal 192.168.2.5  "YM_ROUTER_CVE-2013-2679"  B  4
check_scan Normal 192.168.2.142  "YM_WEB_CVE-2012-1823"  C  4


upload_FTP























